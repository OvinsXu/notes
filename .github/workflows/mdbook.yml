# 需要先学习一下YAML语法 ：http://ruanyifeng.com/blog/2016/07/yaml.html

# 一个 Workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。
# 下面的`jobs`有`build`和`deploy`两个任务


# Workflow 的名称
name: Deploy mdBook site to Pages

# 触发器，详细：https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows
on:
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
# 权限
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# 下面的 deploy 需要依赖于 build

jobs:   
  # 把markdown转成静态网页html
  build:
    runs-on: ubuntu-latest
    # 设置环境变量
    env:
      MDBOOK_VERSION: 0.4.30
    # 每个jobs由多个step组成，每个 step 都在运行器环境中独立运行，所以 step 之间不会保留对环境变量的更改
    # step一般运行`命令行命令`、`环境配置命令`、或者`Actions`（其实就是github官方提供的命令）；非常多：https://github.com/marketplace?type=actions
    steps:
      # 这是Actions，先将我的代码取到容器中
      - uses: actions/checkout@v3
      # 这是`环境配置命令`，安装rust、cargo、mdbook等
      - name: Install mdBook
        run: |
          curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf -y | sh
          rustup update
          cargo install --version ${MDBOOK_VERSION} mdbook
      # 这又是一个Actions
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      # 先把summary生成了，由于没有给容器写代码库的权限，这个文件只是在部署过程中存在
      - name: Build with mdBook
        run: |
          python3 ./generate_summary.py
          mdbook build
      # 构建成静态网页到对应路径，with携带参数
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./book

  # 部署静态网页到Github Pages
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        
# 复杂一些的构建可能还需要用到矩阵，比如下面的，会分别构建两个系统下三种node环境，共6种版本
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         os: [ubuntu-16.04, ubuntu-18.04]
#         node: [6, 8, 10]